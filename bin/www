#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('crowdy-backend:server');
var http = require('http');
var mongoose = require('mongoose');
var config = require('config');
var db_server = 'mongodb://' + config.get('db.host') + '/' + config.get('db.name');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

console.log("Creating server at " + port);
var server = http.createServer(app);

/**
 * Open MongoDB default connection
 */

// If the connection throws an error
//mongoose.connection.on("error", function(err) {
//  console.error('Failed to connect to DB ' + db_server + ' on startup ', err);
//});
// When the connection is disconnected
//mongoose.connection.on('disconnected', function () {
//  console.log('Mongoose default connection to DB :' + db_server + ' disconnected');
//});

// Connect
try {
  var options = { server: { socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 } }, 
                replset: { socketOptions: { keepAlive: 1, connectTimeoutMS : 30000 } } };
  mongoose.connect(db_server, options);
  console.log("Connected to DB " + db_server);
} catch (err) {
  console.log("Server initialization failed " , err.message);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Kill processes gracefully
//process.once('SIGTERM', closeProcess);
//process.once('SIGINT', closeProcess);
process.once('SIGUSR2', closeProcess);

function closeProcess(){
  console.log("Closing");
  // Close Mongo Connection
  mongoose.connection.close(function () {
    console.log('Mongoose default connection with DB :' + db_server + ' is closed through app termination');
    // Close Server
    server.close();
    process.kill(process.pid, 'SIGUSR2');
  });
}

// Cleanup after close
  server.on('close', function() {
  console.log("Closed");
  // The commented out clean exit confuses nodemon into thinking it doesn't want
  // a restart. process.kill works better
  //process.kill(process.pid, 'SIGUSR2');
  //process.exit(0);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
